<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="../t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
List<TypeData> _def = ReadJsonDef<TypeData>(outputPath, "vector_defs.json");
string pMap = "xyzw";
string pMapUpper = "XYZW";

foreach(TypeData d in _def)
{
	if(!d.IsFPType)
	{
		continue;
	}

	foreach(int size in _vectorSizes)
	{
		string fullName = $"{d.Name}{size}{d.Postfix}";
		string fn = $"{fullName}.fp";
		string fpCast = d.DT == "float" ? "(float)" : "";
		string intCast = d.DT == "float" ? "(int)" : (d.DT == "double" ? "(long)" : "$(${d.DT}");
		string intCastPostfix = d.DT == "float" ? "I" : "L";
#>
using System.Runtime.InteropServices;
using System;

namespace Molten
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=size#> components.</summary>
	public partial struct <#=fullName#>
	{
		/// <summary>
        /// Saturates this instance in the range [0,1]
        /// </summary>
        public void Saturate()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=pMapUpper[p]#> < <#=d.Zero#> ? <#=d.Zero#> : <#=pMapUpper[p]#> > <#=d.One#> ? <#=d.One#> : <#=pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Rounds all components down to the nearest unit.</summary>
        public void Floor()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=(d.DT == "float" ? "(float)" : "")#>Math.Floor(<#=pMapUpper[p]#>);
<#
		}
#>
        }

        /// <summary>Rounds all components up to the nearest unit.</summary>
        public void Ceiling()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=(d.DT == "float" ? "(float)" : "")#>Math.Ceiling(<#=pMapUpper[p]#>);
<#
		}
#>
        }

		/// <summary>Truncate each near-zero component of the current vector towards zero.</summary>
        public void Truncate()
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = (Math.Abs(<#=pMapUpper[p]#>) - 0.0001<#=d.FPL#> < 0) ? 0 : <#=pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Updates the component values to the power of the specified value.</summary>
        /// <param name="power"></param>
        public void Pow(<#=d.DT#> power)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=fpCast#>Math.Pow(<#=pMapUpper[p]#>, power);
<#
		}
#>
        }

#region Static Methods
		/// <summary>Truncate each near-zero component of a vector towards zero.</summary>
        /// <param name="value">The <#=fullName#> to be truncated.</param>
        /// <returns></returns>
        public static <#=fullName#> Truncate(<#=fullName#> value)
        {
            return new <#=fullName#>()
            {
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = (Math.Abs(value.<#=pMapUpper[p]#>) - 0.0001<#=d.FPL#> < 0) ? 0 : value.X,
<#
		}
#>
            };
        }
#endregion

#region Operators - Cast
        public static explicit operator Vector<#=size#><#=intCastPostfix#>(<#=fullName#> value)
		{
			return new Vector<#=size#><#=intCastPostfix#>()
			{
<#
			for(int p = 0; p < size; p++)
			{
#>
				<#=pMapUpper[p]#> = <#=intCast#>value.<#=pMapUpper[p]#>,
<#
			}
#>
			};
		}
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
