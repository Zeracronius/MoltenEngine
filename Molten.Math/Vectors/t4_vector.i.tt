<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="../t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
List<TypeData> _def = ReadJsonDef<TypeData>(outputPath, "vector_defs.json");
string pMap = "xyzw";
string pMapUpper = "XYZW";

foreach(TypeData d in _def)
{
	if(d.IsFPType)
	{
		continue;
	}

	foreach(int size in _vectorSizes)
	{
		string fullName = $"{d.Name}{size}{d.Postfix}";
		string fn = $"{fullName}.i";
		string fpCast = d.FP == "float" ? "(float)" : "(double)";
#>
using System.Runtime.InteropServices;
using System;

namespace Molten
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=size#> components.</summary>
	public partial struct <#=fullName#>
	{

#region Operators - Cast
        public static explicit operator Vector<#=size#><#=d.FPL#>(<#=fullName#> value)
		{
			return new Vector<#=size#><#=d.FPL#>()
			{
<#
			for(int p = 0; p < size; p++)
			{
#>
				<#=pMapUpper[p]#> = <#=fpCast#>value.<#=pMapUpper[p]#>,
<#
			}
#>
			};
		}
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
