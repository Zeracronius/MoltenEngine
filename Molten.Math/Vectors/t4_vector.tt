<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ include file="../t4_header.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#
string outputPath = this.Host.ResolvePath("");
List<TypeData> _def = ReadJsonDef<TypeData>(outputPath, "vector_defs.json");
string pMap = "xyzw";
string pMapUpper = "XYZW";
string r = "";

foreach(TypeData d in _def)
{
	foreach(int size in _vectorSizes)
	{
		string fName = $"{d.Name}{size}{d.Postfix}";
		string fn = $"{fName}";
		string fpCast = d.DT == "float" ? "(float)" : (d.DT == "double" ? "" : $"({d.DT})");
		string mathHelper = d.FP == "double" ? "MathHelperDP" : "MathHelper";
        string typeCast = (d.DT == "byte" || d.DT == "sbyte" || d.DT == "short" || d.DT == "ushort") ? $"({d.DT})" : "";
        string fpToTypeCast = (typeCast.Length > 0) ? typeCast : (d.DT != d.FP ? $"({d.DT})" : "");
        string intType = (d.DT == "byte" || d.DT == "sbyte" || d.DT == "short" || d.DT == "ushort") ? $"int" : d.DT;
#>
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Globalization;

namespace Molten
{
	///<summary>A <see cref = "<#=d.DT#>"/> vector comprised of <#=_strSize[size]#> components.</summary>
	[StructLayout(LayoutKind.Sequential, Pack=<#=d.Pack#>)]
	public partial struct <#=fName#> : IFormattable
	{
<#
		for(int p = 0; p < size; p++)
		{
#>
		///<summary>The <#=pMapUpper[p]#> component.</summary>
		public <#=d.DT#> <#=pMapUpper[p]#>;

<#
		}
#>

		///<summary>The size of <see cref="<#=fName#>"/>, in bytes.</summary>
		public static readonly int SizeInBytes = Marshal.SizeOf(typeof(<#=fName#>));

		///<summary>A <#=fName#> with every component set to <#=d.One#>.</summary>
		public static readonly <#=fName#> One = new <#=fName#>(<#for(int p = 0; p < size; p++){#><#=d.One#><#=(p < (size-1) ? ", " : "")#><#}#>);

<#
		for(int p = 0; p < size; p++)
		{
#>
		/// <summary>The <#=pMapUpper[p]#> unit <see cref="<#=fName#>"/>.</summary>
		public static readonly <#=fName#> Unit<#=pMapUpper[p]#> = new <#=fName#>(<#for(int u = 0; u < size; u++){#><#=(u == p ?d.One : d.Zero)#><#=(u < (size-1) ? ", " : "")#><#}#>);

<#
		}
#>
		/// <summary>Represents a zero'd <#=fName#>.</summary>
		public static readonly <#=fName#> Zero = new <#=fName#>(<#for(int p = 0; p < size; p++){#><#=d.Zero#><#=(p < (size-1) ? ", " : "")#><#}#>);

		 /// <summary>
        /// Gets a value indicting whether this instance is normalized.
        /// </summary>
        public bool IsNormalized
        {
            get => <#=mathHelper#>.IsOne(<#for(int p = 0; p < size; p++){#>(<#=pMapUpper[p]#> * <#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

        /// <summary>
        /// Gets a value indicting whether this vector is zero
        /// </summary>
        public bool IsZero
        {
            get => <#for(int p = 0; p < size; p++){#><#=pMapUpper[p]#> == <#=d.Zero#><#=(p < (size-1) ? " && " : "")#><#}#>;
        }

#region Constructors
<#
        foreach(int vcSize in _vectorSizes)
        {
            if(vcSize < size)
            {
                string vcName = $"{d.Name}{vcSize}{d.Postfix}";
#>
        ///<summary>Creates a new instance of <see cref = "<#=fName#>"/>, using a <#=See(vcName)#> to populate the first <#=_strSize[vcSize]#> components.</summary>
		public <#=fName#>(<#=vcName#> vector, <#for(int vp = vcSize; vp < size; vp++){#><#=$"{d.DT} {pMap[vp]}"#><#=(vp < (size-1) ? ", " : "")#><#}#>)
		{
<#
		for(int p = 0; p < vcSize; p++)
		{
#>
			<#=pMapUpper[p]#> = vector.<#=pMapUpper[p]#>;
<#
		}
#>
<#
		for(int p = vcSize; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=pMap[p]#>;
<#
		}
#>
		}
<#
            }
        }
#>

		///<summary>Creates a new instance of <see cref = "<#=fName#>"/>.</summary>
		public <#=fName#>(<#=GetConstructorArgs(d.DT, pMap, size)#>)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=pMap[p]#>;
<#
		}
#>
		}

        ///<summary>Creates a new instance of <see cref = "<#=fName#>"/>.</summary>
		public <#=fName#>(<#=d.DT#> value)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = value;
<#
		}
#>
		}

		/// <summary>
        /// Initializes a new instance of the <see cref="<#=fName#>"/> struct.
        /// </summary>
        /// <param name="values">The values to assign to the <#=GetParamSentence(pMapUpper, size, ", ", " and ")#> components of the vector. This must be an array with <#=size#> elements.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        public <#=fName#>(<#=d.DT#>[] values)
        {
            if (values == null)
                throw new ArgumentNullException("values");
            if (values.Length != <#=size#>)
                throw new ArgumentOutOfRangeException("values", "There must be <#=size#> and only <#=size#> input values for <#=fName#>.");

<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = values[<#=p#>];
<#
		}
#>
        }

		/// <summary>
        /// Initializes a new instance of the <see cref="<#=fName#>"/> struct from an unsafe pointer. The pointer should point to an array of <#=_strSize[size]#> elements.
        /// </summary>
		public unsafe <#=fName#>(<#=d.DT#>* ptr)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = ptr[<#=p#>];
<#
		}
#>
		}
#endregion

#region Instance Methods
        /// <summary>
        /// Determines whether the specified <#=See(fName)#> is equal to this instance.
        /// </summary>
        /// <param name="other">The <#=See(fName)#> to compare with this instance.</param>
        /// <returns>
        /// 	<c>true</c> if the specified <#=See(fName)#> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(ref <#=fName#> other)
        {
            return <#for(int p = 0; p < size; p++){#><#=mathHelper#>.NearEqual(other.<#=pMapUpper[p]#>, <#=pMapUpper[p]#>)<#=(p < (size-1) ? " && " : "")#><#}#>;
        }

        /// <summary>
        /// Determines whether the specified <#=See(fName)#> is equal to this instance.
        /// </summary>
        /// <param name="other">The <#=See(fName)#> to compare with this instance.</param>
        /// <returns>
        /// 	<c>true</c> if the specified <#=See(fName)#> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(<#=fName#> other)
        {
            return Equals(ref other);
        }

        /// <summary>
        /// Determines whether the specified <#=See(fName)#> is equal to this instance.
        /// </summary>
        /// <param name="value">The <#=See(fName)#> to compare with this instance.</param>
        /// <returns>
        /// 	<c>true</c> if the specified <#=See(fName)#> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        public override bool Equals(object value)
        {
            if (!(value is <#=fName#>))
                return false;

            var strongValue = (<#=fName#>)value;
            return Equals(ref strongValue);
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>
        /// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
        /// </returns>
        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = X.GetHashCode();
<#
		for(int p = 1; p < size; p++)
		{
#>
                hashCode = (hashCode * 397) ^ <#=pMapUpper[p]#>.GetHashCode();
<#
		}
#>
                return hashCode;
            }
        }

        /// <summary>
        /// Calculates the length of the vector.
        /// </summary>
        /// <returns>The length of the vector.</returns>
        /// <remarks>
        /// <see cref="Vector2F.LengthSquared"/> may be preferred when only the relative length is needed
        /// and speed is of the essence.
        /// </remarks>
        public <#=d.DT#> Length()
        {
            return <#=fpCast#>Math.Sqrt(<#for(int p = 0; p < size; p++){#>(<#=pMapUpper[p]#> * <#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

        /// <summary>
        /// Calculates the squared length of the vector.
        /// </summary>
        /// <returns>The squared length of the vector.</returns>
        /// <remarks>
        /// This method may be preferred to <see cref="Vector2F.Length"/> when only a relative length is needed
        /// and speed is of the essence.
        /// </remarks>
        public <#=d.DT#> LengthSquared()
        {
            return <#=typeCast#>(<#for(int p = 0; p < size; p++){#>(<#=pMapUpper[p]#> * <#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

        /// <summary>
        /// Converts the vector into a unit vector.
        /// </summary>
        public void Normalize()
        {
            <#=d.DT#> length = Length();
            if (!<#=mathHelper#>.IsZero(length))
            {
                <#=d.FP#> inverse = 1.0<#=d.FPL#> / length;
<#
		for(int p = 0; p < size; p++)
		{
#>
			    <#=pMapUpper[p]#> = <#=fpCast#>(<#=pMapUpper[p]#> * inverse);
<#
		}
#>
            }
        }

		/// <summary>
        /// Creates an array containing the elements of the current <see cref="<#=fName#>"/>.
        /// </summary>
        /// <returns>A <#=_strSize[size]#>-element array containing the components of the vector.</returns>
        public <#=d.DT#>[] ToArray()
        {
            return new <#=d.DT#>[] { <#=GetParamSentence(pMapUpper, size, ", ", ", ")#>};
        }
<#
    if(!d.Unsigned)
    {
#>
		/// <summary>
        /// Reverses the direction of the current <#=See(fName)#>.
        /// </summary>
        /// <returns>A <#=See(fName)#> facing the opposite direction.</returns>
		public <#=fName#> Negate()
		{
			return new <#=fName#>(<#=GetParamSentence(pMapUpper, size, ", ", ", ", $"{typeCast}-")#>);
		}
<#
    }
#>		
        /// <summary>
        /// Returns a normalized unit vector of the original vector.
        /// </summary>
        public <#=fName#> GetNormalized()
        {
            <#=d.FP#> length = Length();
            if (!<#=mathHelper#>.IsZero(length))
            {
                <#=d.FP#> inverse = 1.0<#=d.FPL#> / length;
                return new <#=fName#>()
                {
<#
		    for(int p = 0; p < size; p++)
		    {
#>
			        <#=pMapUpper[p]#> = <#=fpToTypeCast#>(this.<#=pMapUpper[p]#> * inverse),
<#
		    }
#>
                };
            }
            else
            {
                return new <#=fName#>();
            }
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public void Clamp(<#=d.DT#> min, <#=d.DT#> max)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=pMapUpper[p]#> < min ? min : <#=pMapUpper[p]#> > max ? max : <#=pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public void Clamp(<#=fName#> min, <#=fName#> max)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=pMapUpper[p]#> = <#=pMapUpper[p]#> < min.<#=pMapUpper[p]#> ? min.<#=pMapUpper[p]#> : <#=pMapUpper[p]#> > max.<#=pMapUpper[p]#> ? max.<#=pMapUpper[p]#> : <#=pMapUpper[p]#>;
<#
		}
#>
        }
#endregion

#region To-String
<#
		string strFormat = "";
		for(int fmt = 0; fmt < size; fmt++)
			strFormat += $"{pMapUpper[fmt]}:{("{"+fmt+"}")}{(fmt < (size-1) ? " " : "")}";
#>

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </summary>
        /// <param name="format">The format.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </returns>
        public string ToString(string format)
        {
            if (format == null)
                return ToString();

            return string.Format(CultureInfo.CurrentCulture, "<#=strFormat#>", 
			<#=GetParamSentence(pMapUpper, size, ", ", ", ", "", ".ToString(format, CultureInfo.CurrentCulture)")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </summary>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </returns>
        public string ToString(IFormatProvider formatProvider)
        {
            return string.Format(formatProvider, "<#=strFormat#>", <#=GetParamSentence(pMapUpper, size, ", ", ", ")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </returns>
        public override string ToString()
        {
            return string.Format(CultureInfo.CurrentCulture, "<#=strFormat#>", <#=GetParamSentence(pMapUpper, size, ", ", ", ")#>);
        }

		/// <summary>
        /// Returns a <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">The format provider.</param>
        /// <returns>
        /// A <see cref="System.String"/> that represents this <#=See(fName)#>.
        /// </returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (format == null)
                return ToString(formatProvider);

            return string.Format(formatProvider, "<#=strFormat#>", <#=GetParamSentence(pMapUpper, size, ", ", ", ", "", ".ToString(format, formatProvider)")#>);
        }
#endregion

#region Add operators
        public static void Add(ref <#=fName#> left, ref <#=fName#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> + right.<#=pMapUpper[p]#>);
<#
		}
#>
        }

        public static void Add(ref <#=fName#> left, <#=d.DT#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> + right);
<#
		}
#>
        }

		public static <#=fName#> operator +(<#=fName#> left, <#=fName#> right)
		{
			Add(ref left, ref right, out <#=fName#> result);
            return result;
		}

		public static <#=fName#> operator +(<#=fName#> left, <#=d.DT#> right)
		{
            Add(ref left, right, out <#=fName#> result);
            return result;
		}

        public static <#=fName#> operator +(<#=d.DT#> left, <#=fName#> right)
		{
            Add(ref right, left, out <#=fName#> result);
            return result;
		}

		/// <summary>
        /// Assert a <#=See(fName)#> (return it unchanged).
        /// </summary>
        /// <param name="value">The <#=See(fName)#> to assert (unchanged).</param>
        /// <returns>The asserted (unchanged) <#=See(fName)#>.</returns>
        public static <#=fName#> operator +(<#=fName#> value)
        {
            return value;
        }
#endregion

#region Subtract operators
		public static void Subtract(ref <#=fName#> left, ref <#=fName#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> - right.<#=pMapUpper[p]#>);
<#
		}
#>
        }

        public static void Subtract(ref <#=fName#> left, <#=d.DT#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> - right);
<#
		}
#>
        }

		public static <#=fName#> operator -(<#=fName#> left, <#=fName#> right)
		{
			Subtract(ref left, ref right, out <#=fName#> result);
            return result;
		}

		public static <#=fName#> operator -(<#=fName#> left, <#=d.DT#> right)
		{
            Subtract(ref left, right, out <#=fName#> result);
            return result;
		}

        public static <#=fName#> operator -(<#=d.DT#> left, <#=fName#> right)
		{
            Subtract(ref right, left, out <#=fName#> result);
            return result;
		}

<#
        if(!d.Unsigned)
        {
#>
        /// <summary>
        /// Negate/reverse the direction of a <see cref="Vector3D"/>.
        /// </summary>
        /// <param name="value">The <see cref="<#=fName#>"/> to reverse.</param>
        /// <param name="result">The output for the reversed <#=See(fName)#>.</param>
        public static void Negate(ref <#=fName#> value, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>-value.<#=pMapUpper[p]#>;
<#
		}
#>            
        }

		/// <summary>
        /// Negate/reverse the direction of a <#=See(fName)#>.
        /// </summary>
        /// <param name="value">The <#=See(fName)#> to reverse.</param>
        /// <returns>The reversed <#=See(fName)#>.</returns>
        public static <#=fName#> operator -(<#=fName#> value)
        {
            Negate(ref value, out value);
            return value;
        }
<#
        }
#>
#endregion

#region division operators
		public static void Divide(ref <#=fName#> left, ref <#=fName#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> / right.<#=pMapUpper[p]#>);
<#
		}
#>
        }

        public static void Divide(ref <#=fName#> left, <#=d.DT#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> / right);
<#
		}
#>
        }

		public static <#=fName#> operator /(<#=fName#> left, <#=fName#> right)
		{
			Divide(ref left, ref right, out <#=fName#> result);
            return result;
		}

		public static <#=fName#> operator /(<#=fName#> left, <#=d.DT#> right)
		{
            Divide(ref left, right, out <#=fName#> result);
            return result;
		}

        public static <#=fName#> operator /(<#=d.DT#> left, <#=fName#> right)
		{
            Divide(ref right, left, out <#=fName#> result);
            return result;
		}
#endregion

#region Multiply operators
		public static void Multiply(ref <#=fName#> left, ref <#=fName#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> * right.<#=pMapUpper[p]#>);
<#
		}
#>
        }

        public static void Multiply(ref <#=fName#> left, <#=d.DT#> right, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=typeCast#>(left.<#=pMapUpper[p]#> * right);
<#
		}
#>
        }

		public static <#=fName#> operator *(<#=fName#> left, <#=fName#> right)
		{
			Multiply(ref left, ref right, out <#=fName#> result);
            return result;
		}

		public static <#=fName#> operator *(<#=fName#> left, <#=d.DT#> right)
		{
            Multiply(ref left, right, out <#=fName#> result);
            return result;
		}

        public static <#=fName#> operator *(<#=d.DT#> left, <#=fName#> right)
		{
            Multiply(ref right, left, out <#=fName#> result);
            return result;
		}
#endregion

#region Operators - Equality
        /// <summary>
        /// Tests for equality between two objects.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The second value to compare.</param>
        /// <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(<#=fName#> left, <#=fName#> right)
        {
            return left.Equals(ref right);
        }

        /// <summary>
        /// Tests for inequality between two objects.
        /// </summary>
        /// <param name="left">The first value to compare.</param>
        /// <param name="right">The second value to compare.</param>
        /// <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(<#=fName#> left, <#=fName#> right)
        {
            return !left.Equals(ref right);
        }
#endregion

#region Operators - Cast
<#
        foreach(int castSize in _vectorSizes)
        {
            string castName = $"{d.Name}{castSize}{d.Postfix}";
            if(castSize == size)
                continue;
#>
        ///<summary>Casts a <#=See(fName)#> to a <#=See(castName)#>.</summary>
        public static explicit operator <#=castName#>(<#=fName#> value)
        {
            return new <#=castName#>(<#for(int p = 0; p < castSize; p++){#><#=(p < size ? $"value.{pMapUpper[p]}" : d.Zero)#><#=(p < (castSize-1) ? ", " : "")#><#}#>);
        }

<#
        }
#>
#endregion

#region Static Methods
        /// <summary>
        /// Tests whether one 3D vector is near another 3D vector.
        /// </summary>
        /// <param name="left">The left vector.</param>
        /// <param name="right">The right vector.</param>
        /// <param name="epsilon">The epsilon.</param>
        /// <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        public static bool NearEqual(<#=fName#> left, <#=fName#> right, <#=fName#> epsilon)
        {
            return NearEqual(ref left, ref right, ref epsilon);
        }

        /// <summary>
        /// Tests whether one 3D vector is near another 3D vector.
        /// </summary>
        /// <param name="left">The left vector.</param>
        /// <param name="right">The right vector.</param>
        /// <param name="epsilon">The epsilon.</param>
        /// <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        public static bool NearEqual(ref <#=fName#> left, ref <#=fName#> right, ref <#=fName#> epsilon)
        {
            return <#for(int p = 0; p < size; p++){#><#=mathHelper#>.WithinEpsilon(left.<#=pMapUpper[p]#>, right.<#=pMapUpper[p]#>, epsilon.<#=pMapUpper[p]#>)<#=(p < (size-1) ? " && " : "")#><#}#>;
        }

        /// <summary>
        /// Performs a cubic interpolation between two vectors.
        /// </summary>
        /// <param name="start">Start vector.</param>
        /// <param name="end">End vector.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        public static <#=fName#> SmoothStep(ref <#=fName#> start, ref <#=fName#> end, <#=d.FP#> amount)
        {
            amount = <#=mathHelper#>.SmoothStep(amount);
            return Lerp(ref start, ref end, amount);
        }

        /// <summary>
        /// Performs a cubic interpolation between two vectors.
        /// </summary>
        /// <param name="start">Start vector.</param>
        /// <param name="end">End vector.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <returns>The cubic interpolation of the two vectors.</returns>
        public static <#=fName#> SmoothStep(<#=fName#> start, <#=fName#> end, <#=d.DT#> amount)
        {
            return SmoothStep(ref start, ref end, amount);
        }    

        /// <summary>
        /// Orthogonalizes a list of <#=See(fName)#>.
        /// </summary>
        /// <param name="destination">The list of orthogonalized <#=See(fName)#>.</param>
        /// <param name="source">The list of vectors to orthogonalize.</param>
        /// <remarks>
        /// <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
        /// means that any given vector in the list will be orthogonal to any other given vector in the
        /// list.</para>
        /// <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
        /// tend to be numerically unstable. The numeric stability decreases according to the vectors
        /// position in the list so that the first vector is the most stable and the last vector is the
        /// least stable.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        public static void Orthogonalize(<#=fName#>[] destination, params <#=fName#>[] source)
        {
            //Uses the modified Gram-Schmidt process.
            //q1 = m1
            //q2 = m2 - ((q1 ⋅ m2) / (q1 ⋅ q1)) * q1
            //q3 = m3 - ((q1 ⋅ m3) / (q1 ⋅ q1)) * q1 - ((q2 ⋅ m3) / (q2 ⋅ q2)) * q2
            //q4 = m4 - ((q1 ⋅ m4) / (q1 ⋅ q1)) * q1 - ((q2 ⋅ m4) / (q2 ⋅ q2)) * q2 - ((q3 ⋅ m4) / (q3 ⋅ q3)) * q3
            //q5 = ...

            if (source == null)
                throw new ArgumentNullException("source");
            if (destination == null)
                throw new ArgumentNullException("destination");
            if (destination.Length < source.Length)
                throw new ArgumentOutOfRangeException("destination", "The destination array must be of same length or larger length than the source array.");

            for (int i = 0; i < source.Length; ++i)
            {
                <#=fName#> newvector = source[i];

                for (int r = 0; r < i; ++r)
                    newvector -= <#=typeCast#>(Dot(destination[r], newvector) / Dot(destination[r], destination[r])) * destination[r];

                destination[i] = newvector;
            }
        }

        /// <summary>
        /// Orthonormalizes a list of vectors.
        /// </summary>
        /// <param name="destination">The list of orthonormalized vectors.</param>
        /// <param name="source">The list of vectors to orthonormalize.</param>
        /// <remarks>
        /// <para>Orthonormalization is the process of making all vectors orthogonal to each
        /// other and making all vectors of unit length. This means that any given vector will
        /// be orthogonal to any other given vector in the list.</para>
        /// <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
        /// tend to be numerically unstable. The numeric stability decreases according to the vectors
        /// position in the list so that the first vector is the most stable and the last vector is the
        /// least stable.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        public static void Orthonormalize(<#=fName#>[] destination, params <#=fName#>[] source)
        {
            //Uses the modified Gram-Schmidt process.
            //Because we are making unit vectors, we can optimize the math for orthogonalization
            //and simplify the projection operation to remove the division.
            //q1 = m1 / |m1|
            //q2 = (m2 - (q1 ⋅ m2) * q1) / |m2 - (q1 ⋅ m2) * q1|
            //q3 = (m3 - (q1 ⋅ m3) * q1 - (q2 ⋅ m3) * q2) / |m3 - (q1 ⋅ m3) * q1 - (q2 ⋅ m3) * q2|
            //q4 = (m4 - (q1 ⋅ m4) * q1 - (q2 ⋅ m4) * q2 - (q3 ⋅ m4) * q3) / |m4 - (q1 ⋅ m4) * q1 - (q2 ⋅ m4) * q2 - (q3 ⋅ m4) * q3|
            //q5 = ...

            if (source == null)
                throw new ArgumentNullException("source");
            if (destination == null)
                throw new ArgumentNullException("destination");
            if (destination.Length < source.Length)
                throw new ArgumentOutOfRangeException("destination", "The destination array must be of same length or larger length than the source array.");

            for (int i = 0; i < source.Length; ++i)
            {
                <#=fName#> newvector = source[i];

                for (int r = 0; r < i; ++r)
                    newvector -= Dot(destination[r], newvector) * destination[r];

                newvector.Normalize();
                destination[i] = newvector;
            }
        }

        /// <summary>
        /// Takes the value of an indexed component and assigns it to the axis of a new <#=See(fName)#>. <para />
        /// For example, a swizzle input of (1,1) on a <#=See(fName)#> with the values, 20 and 10, will return a vector with values 10,10, because it took the value of component index 1, for both axis."
        /// </summary>
        /// <param name="val">The current vector.</param>
<#
		for(int p = 0; p < size; p++)
		{
#>
		/// <param name="<#=pMap[p]#>Index">The axis index to use for the new <#=pMapUpper[p]#> value.</param>
<#
		}
#>
        /// <returns></returns>
        public static unsafe <#=fName#> Swizzle(<#=fName#> val, <#for(int p = 0; p < size; p++){#>int <#=pMap[p]#>Index<#=(p < (size-1) ? ", " : "")#><#}#>)
        {
            return new <#=fName#>()
            {
<#
		for(int p = 0; p < size; p++)
		{
#>
			   <#=pMapUpper[p]#> = (&val.X)[<#=pMap[p]#>Index],
<#
		}
#>
            };
        }

        /// <returns></returns>
        public static unsafe <#=fName#> Swizzle(<#=fName#> val, <#for(int p = 0; p < size; p++){#>uint <#=pMap[p]#>Index<#=(p < (size-1) ? ", " : "")#><#}#>)
        {
            return new <#=fName#>()
            {
<#
		for(int p = 0; p < size; p++)
		{
#>
			    <#=pMapUpper[p]#> = (&val.X)[<#=pMap[p]#>Index],
<#
		}
#>
            };
        }

        /// <summary>
        /// Calculates the distance between two vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector.</param>
        /// <returns>The distance between the two vectors.</returns>
        /// <remarks>
        /// <see cref="<#=fName#>.DistanceSquared(<#=fName#>, <#=fName#>)"/> may be preferred when only the relative distance is needed
        /// and speed is of the essence.
        /// </remarks>
        public static <#=d.DT#> Distance(ref <#=fName#> value1, ref <#=fName#> value2)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=d.DT#> <#=pMap[p]#> = <#=typeCast#>(value1.<#=pMapUpper[p]#> - value2.<#=pMapUpper[p]#>);
<#
		}
#>

            return <#=fpCast#>Math.Sqrt(<#for(int p = 0; p < size; p++){#>(<#=pMap[p]#> * <#=pMap[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

        /// <summary>
        /// Calculates the distance between two vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector.</param>
        /// <returns>The distance between the two vectors.</returns>
        /// <remarks>
        /// <see cref="<#=fName#>.DistanceSquared(<#=fName#>, <#=fName#>)"/> may be preferred when only the relative distance is needed
        /// and speed is of the essence.
        /// </remarks>
        public static <#=d.DT#> Distance(<#=fName#> value1, <#=fName#> value2)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			<#=d.DT#> <#=pMap[p]#> = <#=typeCast#>(value1.<#=pMapUpper[p]#> - value2.<#=pMapUpper[p]#>);
<#
		}
#>

            return <#=fpCast#>Math.Sqrt(<#for(int p = 0; p < size; p++){#>(<#=pMap[p]#> * <#=pMap[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

        /// <summary>Checks to see if any value (x, y, z, w) are within 0.0001 of 0.
        /// If so this method truncates that value to zero.</summary>
        /// <param name="power">The power.</param>
        /// <param name="vec">The vector.</param>
        public static <#=fName#> Pow(<#=fName#> vec, <#=d.DT#> power)
        {
            return new <#=fName#>()
            {
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = <#=fpCast#>Math.Pow(vec.<#=pMapUpper[p]#>, power),
<#
		}
#>
            };
        }

        /// <summary>
        /// Calculates the dot product of two <#=See(fName)#> vectors.
        /// </summary>
        /// <param name="left">First <#=See(fName)#> source vector</param>
        /// <param name="right">Second <#=See(fName)#> source vector.</param>
        public static <#=d.DT#> Dot(ref <#=fName#> left, ref <#=fName#> right)
        {
			return <#=typeCast#>(<#for(int p = 0; p < size; p++){#>(<#=typeCast#>left.<#=pMapUpper[p]#> * right.<#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

		/// <summary>
        /// Calculates the dot product of two <#=See(fName)#> vectors.
        /// </summary>
        /// <param name="left">First <#=See(fName)#> source vector</param>
        /// <param name="right">Second <#=See(fName)#> source vector.</param>
        public static <#=d.DT#> Dot(<#=fName#> left, <#=fName#> right)
        {
			return <#=typeCast#>(<#for(int p = 0; p < size; p++){#>(left.<#=pMapUpper[p]#> * right.<#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>);
        }

		/// <summary>
        /// Performs a Hermite spline interpolation.
        /// </summary>
        /// <param name="value1">First source position <#=See(fName)#> vector.</param>
        /// <param name="tangent1">First source tangent <#=See(fName)#> vector.</param>
        /// <param name="value2">Second source position <#=See(fName)#> vector.</param>
        /// <param name="tangent2">Second source tangent <#=See(fName)#> vector.</param>
        /// <param name="amount">Weighting factor.</param>
        public static <#=fName#> Hermite(ref <#=fName#> value1, ref <#=fName#> tangent1, ref <#=fName#> value2, ref <#=fName#> tangent2, <#=d.DT#> amount)
        {
            <#=d.FP#> squared = amount * amount;
            <#=d.FP#> cubed = amount * squared;
            <#=d.FP#> part1 = ((2.0<#=d.FPL#> * cubed) - (3.0<#=d.FPL#> * squared)) + 1.0<#=d.FPL#>;
            <#=d.FP#> part2 = (-2.0<#=d.FPL#> * cubed) + (3.0<#=d.FPL#> * squared);
            <#=d.FP#> part3 = (cubed - (2.0<#=d.FPL#> * squared)) + amount;
            <#=d.FP#> part4 = cubed - squared;

			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
			if(d.DT == d.FP)
			{
#>
				<#=pMapUpper[p]#> = (((value1.<#=pMapUpper[p]#> * part1) + (value2.<#=pMapUpper[p]#> * part2)) + (tangent1.<#=pMapUpper[p]#> * part3)) + (tangent2.<#=pMapUpper[p]#> * part4),
<#
			}
			else
			{
#>
				<#=pMapUpper[p]#> = <#=fpCast#>((((value1.<#=pMapUpper[p]#> * part1) + (value2.<#=pMapUpper[p]#> * part2)) + (tangent1.<#=pMapUpper[p]#> * part3)) + (tangent2.<#=pMapUpper[p]#> * part4)),
<#
			}
		}
#>
			};
        }

        /// <summary>
        /// Performs a Hermite spline interpolation.
        /// </summary>
        /// <param name="value1">First source position <#=See(fName)#>.</param>
        /// <param name="tangent1">First source tangent <#=See(fName)#>.</param>
        /// <param name="value2">Second source position <#=See(fName)#>.</param>
        /// <param name="tangent2">Second source tangent <#=See(fName)#>.</param>
        /// <param name="amount">Weighting factor.</param>
        /// <returns>The result of the Hermite spline interpolation.</returns>
        public static <#=fName#> Hermite(<#=fName#> value1, <#=fName#> tangent1, <#=fName#> value2, <#=fName#> tangent2, <#=d.DT#> amount)
        {
            return Hermite(ref value1, ref tangent1, ref value2, ref tangent2, amount);
        }

		/// <summary>
        /// Returns a <#=See(fName)#> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
        /// </summary>
        /// <param name="value1">A <#=See(fName)#> containing the <#=size#>D Cartesian coordinates of vertex 1 of the triangle.</param>
        /// <param name="value2">A <#=See(fName)#> containing the <#=size#>D Cartesian coordinates of vertex 2 of the triangle.</param>
        /// <param name="value3">A <#=See(fName)#> containing the <#=size#>D Cartesian coordinates of vertex 3 of the triangle.</param>
        /// <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
        /// <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
        public static <#=fName#> Barycentric(ref <#=fName#> value1, ref <#=fName#> value2, ref <#=fName#> value3, <#=d.DT#> amount1, <#=d.DT#> amount2)
        {
			return new <#=fName#>(
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=typeCast#>((value1.<#=pMapUpper[p]#> + (amount1 * (value2.<#=pMapUpper[p]#> - value1.<#=pMapUpper[p]#>))) + (amount2 * (value3.<#=pMapUpper[p]#> - value1.<#=pMapUpper[p]#>)))<#=(p < (size -1) ? ", " : "")#>
<#
		}
#>
			);
        }

        /// <summary>
        /// Performs a linear interpolation between two <#=See(fName)#>.
        /// </summary>
        /// <param name="start">The start vector.</param>
        /// <param name="end">The end vector.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <remarks>
        /// Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
        /// </remarks>
        public static void Lerp(ref <#=fName#> start, ref <#=fName#> end, <#=d.FP#> amount, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
			result.<#=pMapUpper[p]#> = <#=fpCast#>((1<#=d.FPL#> - amount) * start.<#=pMapUpper[p]#> + amount * end.<#=pMapUpper[p]#>);
<#
		}
#>
        }

		/// <summary>
        /// Performs a linear interpolation between two <#=See(fName)#>.
        /// </summary>
        /// <param name="start">The start vector.</param>
        /// <param name="end">The end vector.</param>
        /// <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
        /// <remarks>
        /// Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
        /// </remarks>
        public static <#=fName#> Lerp(ref <#=fName#> start, ref <#=fName#> end, <#=d.FP#> amount)
        {
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = <#=fpCast#>((1<#=d.FPL#> - amount) * start.<#=pMapUpper[p]#> + amount * end.<#=pMapUpper[p]#>),
<#
		}
#>
			};
        }

        /// <summary>
        /// Returns a <#=See(fName)#> containing the smallest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=See(fName)#>.</param>
        /// <param name="right">The second source <#=See(fName)#>.</param>
        /// <returns>A <#=See(fName)#> containing the smallest components of the source vectors.</returns>
		public static void Min(ref <#=fName#> left, ref <#=fName#> right, out <#=fName#> result)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
				result.<#=pMapUpper[p]#> = (left.<#=pMapUpper[p]#> < right.<#=pMapUpper[p]#>) ? left.<#=pMapUpper[p]#> : right.<#=pMapUpper[p]#>;
<#
		}
#>
		}

        /// <summary>
        /// Returns a <#=See(fName)#> containing the smallest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=See(fName)#>.</param>
        /// <param name="right">The second source <#=See(fName)#>.</param>
        /// <returns>A <#=See(fName)#> containing the smallest components of the source vectors.</returns>
		public static <#=fName#> Min(ref <#=fName#> left, ref <#=fName#> right)
		{
			Min(ref left, ref right, out <#=fName#> result);
            return result;
		}

		/// <summary>
        /// Returns a <#=See(fName)#> containing the smallest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=See(fName)#>.</param>
        /// <param name="right">The second source <#=See(fName)#>.</param>
        /// <returns>A <#=See(fName)#> containing the smallest components of the source vectors.</returns>
		public static <#=fName#> Min(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = (left.<#=pMapUpper[p]#> < right.<#=pMapUpper[p]#>) ? left.<#=pMapUpper[p]#> : right.<#=pMapUpper[p]#>,
<#
		}
#>
			};
		}

        /// <summary>
        /// Returns a <#=See(fName)#> containing the largest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=See(fName)#>.</param>
        /// <param name="right">The second source <#=See(fName)#>.</param>
        /// <returns>A <#=See(fName)#> containing the largest components of the source vectors.</returns>
		public static void Max(ref <#=fName#> left, ref <#=fName#> right, out <#=fName#> result)
		{
<#
		for(int p = 0; p < size; p++)
		{
#>
				result.<#=pMapUpper[p]#> = (left.<#=pMapUpper[p]#> > right.<#=pMapUpper[p]#>) ? left.<#=pMapUpper[p]#> : right.<#=pMapUpper[p]#>;
<#
		}
#>
		}

        /// <summary>
        /// Returns a <#=See(fName)#> containing the largest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=See(fName)#>.</param>
        /// <param name="right">The second source <#=See(fName)#>.</param>
        /// <returns>A <#=See(fName)#> containing the largest components of the source vectors.</returns>
		public static <#=fName#> Max(ref <#=fName#> left, ref <#=fName#> right)
		{
			Max(ref left, ref right, out <#=fName#> result);
            return result;
		}

		/// <summary>
        /// Returns a <#=See(fName)#> containing the largest components of the specified vectors.
        /// </summary>
        /// <param name="left">The first source <#=See(fName)#>.</param>
        /// <param name="right">The second source <#=See(fName)#>.</param>
        /// <returns>A <#=See(fName)#> containing the largest components of the source vectors.</returns>
		public static <#=fName#> Max(<#=fName#> left, <#=fName#> right)
		{
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = (left.<#=pMapUpper[p]#> > right.<#=pMapUpper[p]#>) ? left.<#=pMapUpper[p]#> : right.<#=pMapUpper[p]#>,
<#
		}
#>
			};
		}

		/// <summary>
        /// Calculates the squared distance between two <#=See(fName)#> vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector.</param>
        /// <returns>The squared distance between the two vectors.</returns>
        /// <remarks>Distance squared is the value before taking the square root. 
        /// Distance squared can often be used in place of distance if relative comparisons are being made. 
        /// For example, consider three points A, B, and C. To determine whether B or C is further from A, 
        /// compare the distance between A and B to the distance between A and C. Calculating the two distances 
        /// involves two square roots, which are computationally expensive. However, using distance squared 
        /// provides the same information and avoids calculating two square roots.
        /// </remarks>
		public static <#=d.DT#> DistanceSquared(ref <#=fName#> value1, ref <#=fName#> value2)
        {
<#
			r = "";
			for(int p = 0; p < size; p++)
			{
				r+= $"({pMap[p]} * {pMap[p]}){(p < (size-1) ? " + " : "")}";
#>
            <#=intType#> <#=pMap[p]#> = value1.<#=pMapUpper[p]#> - value2.<#=pMapUpper[p]#>;
<#
			}
#>

            return <#=typeCast#>(<#=r#>);
        }

        /// <summary>
        /// Calculates the squared distance between two <#=See(fName)#> vectors.
        /// </summary>
        /// <param name="value1">The first vector.</param>
        /// <param name="value2">The second vector.</param>
        /// <returns>The squared distance between the two vectors.</returns>
        /// <remarks>Distance squared is the value before taking the square root. 
        /// Distance squared can often be used in place of distance if relative comparisons are being made. 
        /// For example, consider three points A, B, and C. To determine whether B or C is further from A, 
        /// compare the distance between A and B to the distance between A and C. Calculating the two distances 
        /// involves two square roots, which are computationally expensive. However, using distance squared 
        /// provides the same information and avoids calculating two square roots.
        /// </remarks>
		public static <#=d.DT#> DistanceSquared(<#=fName#> value1, <#=fName#> value2)
        {
<#
			r = "";
			for(int p = 0; p < size; p++)
			{
				r+= $"({pMap[p]} * {pMap[p]}){(p < (size-1) ? " + " : "")}";
#>
            <#=intType#> <#=pMap[p]#> = value1.<#=pMapUpper[p]#> - value2.<#=pMapUpper[p]#>;
<#
			}
#>

            return <#=typeCast#>(<#=r#>);
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=See(fName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static <#=fName#> Clamp(<#=fName#> value, <#=d.DT#> min, <#=d.DT#> max)
        {
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = value.<#=pMapUpper[p]#> < min ? min : value.<#=pMapUpper[p]#> > max ? max : value.<#=pMapUpper[p]#>,
<#
		}
#>
			};
        }

        /// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=See(fName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static void Clamp(ref <#=fName#> value, ref <#=fName#> min, ref <#=fName#> max, out <#=fName#> result)
        {
<#
		for(int p = 0; p < size; p++)
		{
#>
				result.<#=pMapUpper[p]#> = value.<#=pMapUpper[p]#> < min.<#=pMapUpper[p]#> ? min.<#=pMapUpper[p]#> : value.<#=pMapUpper[p]#> > max.<#=pMapUpper[p]#> ? max.<#=pMapUpper[p]#> : value.<#=pMapUpper[p]#>;
<#
		}
#>
        }

		/// <summary>Clamps the component values to within the given range.</summary>
        /// <param name="value">The <#=See(fName)#> value to be clamped.</param>
        /// <param name="min">The minimum value of each component.</param>
        /// <param name="max">The maximum value of each component.</param>
        public static <#=fName#> Clamp(<#=fName#> value, <#=fName#> min, <#=fName#> max)
        {
			return new <#=fName#>()
			{
<#
		for(int p = 0; p < size; p++)
		{
#>
				<#=pMapUpper[p]#> = value.<#=pMapUpper[p]#> < min.<#=pMapUpper[p]#> ? min.<#=pMapUpper[p]#> : value.<#=pMapUpper[p]#> > max.<#=pMapUpper[p]#> ? max.<#=pMapUpper[p]#> : value.<#=pMapUpper[p]#>,
<#
		}
#>
			};
        }

<#
    if(!d.Unsigned)
    {
#>
        /// <summary>
        /// Performs a Catmull-Rom interpolation using the specified positions.
        /// </summary>
        /// <param name="value1">The first position in the interpolation.</param>
        /// <param name="value2">The second position in the interpolation.</param>
        /// <param name="value3">The third position in the interpolation.</param>
        /// <param name="value4">The fourth position in the interpolation.</param>
        /// <param name="amount">Weighting factor.</param>
        public static <#=fName#> CatmullRom(ref <#=fName#> value1, ref <#=fName#> value2, ref <#=fName#> value3, ref <#=fName#> value4, <#=d.DT#> amount)
        {
            <#=d.FP#> squared = amount * amount;
            <#=d.FP#> cubed = amount * squared;

            return new <#=fName#>()
            {
<#
				for(int p = 0; p < size; p++)
				{
#>
				<#=pMapUpper[p]#> = <#=fpCast#>(0.5<#=d.FPL#> * ((((2<#=d.FPL#> * value2.<#=pMapUpper[p]#>) + 
                ((-value1.<#=pMapUpper[p]#> + value3.<#=pMapUpper[p]#>) * amount)) + 
                (((((2<#=d.FPL#> * value1.<#=pMapUpper[p]#>) - (5<#=d.FPL#> * value2.<#=pMapUpper[p]#>)) + (4<#=d.FPL#> * value3.<#=pMapUpper[p]#>)) - value4.<#=pMapUpper[p]#>) * squared)) +
                ((((-value1.<#=pMapUpper[p]#> + (3<#=d.FPL#> * value2.<#=pMapUpper[p]#>)) - (3<#=d.FPL#> * value3.<#=pMapUpper[p]#>)) + value4.<#=pMapUpper[p]#>) * cubed))),

<#
			    }
#>
            };
        }

        /// <summary>
        /// Performs a Catmull-Rom interpolation using the specified positions.
        /// </summary>
        /// <param name="value1">The first position in the interpolation.</param>
        /// <param name="value2">The second position in the interpolation.</param>
        /// <param name="value3">The third position in the interpolation.</param>
        /// <param name="value4">The fourth position in the interpolation.</param>
        /// <param name="amount">Weighting factor.</param>
        /// <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        public static <#=fName#> CatmullRom(<#=fName#> value1, <#=fName#> value2, <#=fName#> value3, <#=fName#> value4, <#=d.DT#> amount)
        {
            return CatmullRom(ref value1, ref value2, ref value3, ref value4, amount);
        }
<#
    }
#>

        /// <summary>
        /// Returns the reflection of a vector off a surface that has the specified normal. 
        /// </summary>
        /// <param name="vector">The source vector.</param>
        /// <param name="normal">Normal of the surface.</param>
        /// <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
        /// whether the original vector was close enough to the surface to hit it.</remarks>
        public static <#=fName#> Reflect(ref <#=fName#> vector, ref <#=fName#> normal)
        {
            <#=intType#> dot = <#for(int p = 0; p < size; p++){#>(vector.<#=pMapUpper[p]#> * normal.<#=pMapUpper[p]#>)<#=(p < (size-1) ? " + " : "")#><#}#>;

            return new <#=fName#>()
            {
<#
				for(int p = 0; p < size; p++)
				{
#>
				<#=pMapUpper[p]#> = <#=fpToTypeCast#>(vector.<#=pMapUpper[p]#> - ((2.0<#=d.FPL#> * dot) * normal.<#=pMapUpper[p]#>)),
<#
			    }
#>
            };
        }

        /// <summary>
        /// Converts the <#=See(fName)#> into a unit vector.
        /// </summary>
        /// <param name="value">The <#=See(fName)#> to normalize.</param>
        /// <returns>The normalized <#=See(fName)#>.</returns>
        public static <#=fName#> Normalize(<#=fName#> value)
        {
            value.Normalize();
            return value;
        }
#endregion

#region Indexers
		/// <summary>
        /// Gets or sets the component at the specified index.
        /// </summary>
        /// <value>The value of the <#=GetParamSentence(pMapUpper, size, ",", " or ")#> component, depending on the index.</value>
        /// <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component and so on.</param>
        /// <returns>The value of the component at the specified index.</returns>
        /// <exception cref="System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, <#=(size-1)#>].</exception>
        
		public <#=d.DT#> this[int index]
		{
			get
			{
				switch(index)
				{
<#
					for(int p = 0; p < size; p++)
					{
#>
					case <#=p#>: return <#=pMapUpper[p]#>;
<#
					}
#>
				}
				throw new ArgumentOutOfRangeException("index", "Indices for <#=fName#> run from 0 to <#=(size-1)#>, inclusive.");
			}

			set
			{
				switch(index)
				{
<#
					for(int p = 0; p < size; p++)
					{
#>
					case <#=p#>: <#=pMapUpper[p]#> = value; break;
<#
					}
#>
				}
				throw new ArgumentOutOfRangeException("index", "Indices for <#=fName#> run from 0 to <#=(size-1)#>, inclusive.");
			}
		}
#endregion
	}
}
<#
		SaveFile(outputPath, fn, this.GenerationEnvironment.ToString());
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
}
#>
