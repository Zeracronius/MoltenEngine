<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".cs" #>


<#+
// TODO move to Json file
struct TypeData
{
    public string Name;     // Name
    public string Postfix;  //Name post-fix
    public string DT;       // DataType
    public string FP;       // Floating-point type
    public string FPL;      // Floating-point literal
    public string Pack;     // Packing
    public string One;      // Value for 1 or One
    public string Zero;     // Value for 0 or Zero
    public bool IsFPType;   // The type is a floating-point type
    public bool Unsigned;   // The type uses an unsigned data type
}

string[] _strSize = new string[]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight"};
int[] _vectorSizes = new int[]{2, 3, 4};

public void SaveFile(string folder, string fileName, string content)
{
	using (FileStream fs = new FileStream(Path.Combine(folder, fileName.Trim() + ".cs"), FileMode.Create))
    {
        using (StreamWriter str = new StreamWriter(fs))
        {
            str.WriteLine(content);
            str.Flush();
        }
    }
}

public List<T> ReadJsonDef<T>(string folder, string fileName) where T : struct
{
    string json = File.ReadAllText(Path.Combine(folder, fileName.Trim()));
    return JsonConvert.DeserializeObject<List<T>>(json);
}

public string GetConstructorArgs(string type, string map, int count, string prefix = "", string postfix = "")
{
    if(map.Length < count)
        throw new Exception("Map length is shorter than count");
        
    string r = "";
    for(int i = 0; i < count; i++)
    {
        if(i > 0) r += ", ";
        r += $"{type} {prefix}{map[i]}{postfix}";
    }

    return r;
}

public string GetParamSentence(string pMap, int size, string delimiter = ", ", string finalDelimiter = "", string pPrefix = "", string pPostfix = "")
{
    string r = "";
    for(int i = 0; i < size; i++)
    {
        r += $"{pPrefix}{pMap[i]}{pPostfix}";
        r += i < (size - 1) ? (i < (size - 2) ? ", " : finalDelimiter) : ""; 
    }

    return r;
}

public string See(string typeName)
{
    return $"<see cref=\"{typeName}\"/>";
}
#>
