using SharpDX.Direct3D;
using Molten.Graphics.Shaders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Molten.Graphics
{
    public class Material : HlslShader, IMaterial
    {
        internal MaterialPass[] Passes = new MaterialPass[0];
        internal byte[] InputStructureByteCode;

        // TODO move these to back to the HLSL compiler via a metadata system.
        internal string DefaultVSEntryPoint;
        internal string DefaultGSEntryPoint;
        internal string DefaultDSEntryPoint;
        internal string DefaultHSEntryPoint;
        internal string DefaultPSEntryPoint;

        Dictionary<string, MaterialPass> _passesByName;

        public int PassCount => Passes.Length;

        internal Material(DeviceDX11 device, string filename) : base(device, filename)
        {
            _passesByName = new Dictionary<string, MaterialPass>();
        }

        /// <summary>
        /// Creates a new pass using the default shader stage entry points.
        /// </summary>
        internal void AddDefaultPass()
        {
            // TODO move this back to the HLSL compiler via a metadata system.
            MaterialPass defaultPass = new MaterialPass(this)
            {
                Name = "<Auto-generated pass>",
            };
            defaultPass.VertexShader.EntryPoint = DefaultVSEntryPoint;
            defaultPass.GeometryShader.EntryPoint = DefaultGSEntryPoint;
            defaultPass.DomainShader.EntryPoint = DefaultDSEntryPoint;
            defaultPass.HullShader.EntryPoint = DefaultHSEntryPoint;
            defaultPass.PixelShader.EntryPoint = DefaultPSEntryPoint;
            AddPass(defaultPass);
        }

        internal void AddPass(MaterialPass pass)
        {
            int id = 0;
            if (Passes == null)
            {
                Passes = new MaterialPass[1];
            }
            else
            {
                id = Passes.Length;
                Array.Resize(ref Passes, Passes.Length + 1);
            }

            Passes[id] = pass;
        }

        public IMaterialPass GetPass(int index)
        {
            return Passes[index];
        }

        public IMaterialPass GetPass(string name)
        {
            return _passesByName[name];
        }

        public ObjectMaterialProperties Object { get; set; }

        public LightMaterialProperties Light { get; set; }

        public SceneMaterialProperties Scene { get; set; }

        public GBufferTextureProperties Textures { get; set; }

        public SpriteBatchMaterialProperties SpriteBatch { get; set; }
    }
}
